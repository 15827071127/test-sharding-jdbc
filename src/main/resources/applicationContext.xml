<beans xmlns="http://www.springframework.org/schema/beans"  
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"  
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"  
	xsi:schemaLocation="http://www.springframework.org/schema/beans     
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd    
	http://www.springframework.org/schema/context    
	http://www.springframework.org/schema/context/spring-context-3.0.xsd    
	http://www.springframework.org/schema/aop    
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd    
	http://www.springframework.org/schema/tx    
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springmodules.org/schema/oscache 
	http://www.springmodules.org/schema/cache/springmodules-oscache.xsd 
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.0.xsd">

	<!-- 加载外部配置文件
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>
	 -->
	
	<context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true" />
	
	<!-- tomcat jdbc pool数据源配置 -->
	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
		<property name="driverClassName" value="${mysql.driver}" />
		<property name="url" value="${mysql.url}" />
		<property name="username" value="${mysql.user}" />
		<property name="password" value="${mysql.password}" />
		<property name="jmxEnabled" value="true" />
		<property name="initialSize" value="10" />			<!-- 连接池初始值 -->
		<property name="maxActive" value="100" />			<!-- 连接池最大值 -->
		<property name="minIdle" value="10" />				<!-- 连接池最小空闲值 -->
		<property name="maxIdle" value="100" />				<!-- 连接池最大空闲值 -->
		<property name="maxWait" value="10000" />			<!-- 最大建立连接等待时间 -->
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="true" />
		<property name="testWhileIdle" value="true" />
		<property name="validationQuery" value="SELECT 1" />
		<property name="timeBetweenEvictionRunsMillis" value="3600000" />
		<property name="minEvictableIdleTimeMillis" value="3600000" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
		<property name="dataSource" ref="shardingDataSource" />
		<property name="configLocation" value="classpath:configuration.xml" />
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<!-- 让Spring通过自动扫描来查询和管理Mybatis的Mapper
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.isofts" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	 -->

	<!-- 
		注册BeanPostProcessor：
		(1)AutowiredAnnotationBeanPostProcessor
		(2)RequiredAnnotationBeanPostProcessor
		(3)CommonAnnotationBeanPostProcessor
		(4)PersistenceAnnotationBeanPostProcessor
		注意：如果使用了<context:component-scan />，即可将<context:annotation-config />省去
	-->
	<context:annotation-config />
	
    <!-- 让Spring通过自动扫描来查询和管理Bean -->
    <context:component-scan base-package="net.whpe,com.joinsoft,test,cn.isofts" >
    	<!-- <context:exclude-filter type="annotation"  expression="org.springframework.stereotype.Service" /> --> 
    </context:component-scan>

	<!-- 该 BeanPostProcessor 将自动起作用，对标注 @Autowired 的 Bean 进行自动注入 -->     
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />  
    
	<!-- Quartz
	<import resource="quartz.xml" />
	 -->
	
	<!-- 配置activiti的事务管理器（transactionManager），流程引擎（processEngine）和Activiti引擎服务
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
		<property name="nestedTransactionAllowed" value="true" />
	</bean>
	 -->
	 
	<!-- enable transaction annotation support -->
	<tx:annotation-driven transaction-manager="transactionManager"  />
	
	<bean id="basicDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.isofts.dao.IBasicDao" />
	    <property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<bean id="easyDao" class="com.isofts.dao.EasyDao">
		<property name="dbType" value="${dbType}" />
	</bean>
	
	<import resource="sharding-jdbc.xml" />
</beans>